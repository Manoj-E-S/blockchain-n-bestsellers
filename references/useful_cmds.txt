1. Create a conda environment with specified requirements in current_dir/venv:
    - conda env create -f requirements.yml --prefix ./venv

2. List conda envs:
    - conda env list

3. Activate and deactivate conda env
    - conda activate /path/to/venv
      (OR)
    - conda activate <ENV_NAME>
    - conda deactivate

4. Remove a conda environment and its packages
    - conda remove [--name <ENV_NAME>] [--prefix /path/to/venv] --all

4. Create a requiremets.yml file using conda (based on its install history)
    - conda env export --from-history -f requirements.yml

5. Create a requirements4pip.txt file using pipreqs (based on pip packages used in the project)
    - pipreqs [--force] ./

6. Using pipenv as a package manager
    - pipenv install [--dev]
    (Install project dependencies in a separate environment or initialize a dependency management environment if it doesn't exist)

    - pipenv shell
    (Activate project environment and start a shell instance of it)

    - pipenv (un)install <pkg_name>
    ((Un)Installs the new package and adds it to the dependencies)

    - pipenv run <cmd>
    (Runs the custom/existing command line cmd inside the project environment)

    - pipenv lock
    (Locks any dependencies installed in 'pipenv shell' in Pipfile.lock to enforce version consistency)
    
    - pipenv --rm
    (Remove (ie. uproot) the environment associated with the current project)